function traj = generatePolynomial(times, points)
    mat = zeros((length(points)-1)*4);
    constraints = zeros((length(points)-1)*4, 1);
    mat(1:5, 1:4) = [1 0 0 0; ...
                    0 1 0 0; ...
                    1 times(2) times(2)^2 times(2)^3; ...
                    0 1 2*times(2) 3*times(2)^2; ...
                    0 0 2 6*times(2)];
    constraints(1:4) = [points(1); 0; points(2); 0];
    mat(end-4:end, end-3:end) = [0 -1 0 0;...
                                0 0 -2 0;...
                                1 0 0 0;...
                                1 times(end)-times(end-1) (times(end)-times(end-1))^2 (times(end)-times(end-1))^3;...
                                0 1 2*(times(end)-times(end-1)) 3*(times(end)-times(end-1))^2];
    constraints(end-3:end) = [0; points(end-1); points(end); 0];
    points = points(2:end);
    times = times(2:end);
    for n = 2:length(points)-1
        td = times(n)-times(n-1);
        mat(4*(n-1):4*(n-1) + 5, 4*(n-1)+1:4*(n-1) + 4) = [ ...
            0 -1 0 0; ...
            0 0 -2 0; ...
            1 0 0 0; ...
            1 td td^2 td^3; ...
            0 1 2*td 3*td^2; ...
            0 0 2 6*td
            ];
        constraints(4*(n-1) + 1:4*n) = [0; points(n-1); points(n); 0];
    end
    polya = mat\constraints;
    traj = zeros(length(points), 4);
    for n = 1:length(points)
        traj(n,:) = flip(polya((n-1)*4 + 1 : n*4));
    end
end